{"ast":null,"code":"var _jsxFileName = \"/Users/arina/Documents/concordia-bootcamps/MyFinalProject/frontend/src/components/IndexPage/IndexPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndexPage = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n  const fetchPosts = async () => {\n    try {\n      const response = await fetch('/index'); // Make a GET request to the server endpoint\n      const data = await response.json();\n      if (response.ok) {\n        setPosts(data); // Set the fetched posts in the state\n      } else {\n        console.log(data.message); // Log any error message from the server\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Post Index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Username: \", post.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description: \", post.description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, post._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(IndexPage, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = IndexPage;\nexport default IndexPage;\nvar _c;\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"names":["React","useEffect","useState","styled","jsxDEV","_jsxDEV","IndexPage","_s","posts","setPosts","fetchPosts","response","fetch","data","json","ok","console","log","message","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","title","username","description","_id","_c","$RefreshReg$"],"sources":["/Users/arina/Documents/concordia-bootcamps/MyFinalProject/frontend/src/components/IndexPage/IndexPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst IndexPage = () => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const fetchPosts = async () => {\n    try {\n      const response = await fetch('/index'); // Make a GET request to the server endpoint\n      const data = await response.json();\n\n      if (response.ok) {\n        setPosts(data); // Set the fetched posts in the state\n      } else {\n        console.log(data.message); // Log any error message from the server\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Post Index</h1>\n      {posts.map((post) => (\n        <div key={post._id}>\n          <h2>{post.title}</h2>\n          <p>Username: {post.username}</p>\n          <p>Description: {post.description}</p>\n          {/* Render other post details */}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default IndexPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdS,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;MACxC,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACfN,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;MAClB,CAAC,MAAM;QACLG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,oBACEd,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAClBhB,KAAK,CAACiB,GAAG,CAAEC,IAAI,iBACdrB,OAAA;MAAAe,QAAA,gBACEf,OAAA;QAAAe,QAAA,EAAKM,IAAI,CAACC;MAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBnB,OAAA;QAAAe,QAAA,GAAG,YAAU,EAACM,IAAI,CAACE,QAAQ;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChCnB,OAAA;QAAAe,QAAA,GAAG,eAAa,EAACM,IAAI,CAACG,WAAW;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAH9BE,IAAI,CAACI,GAAG;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKb,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjB,EAAA,CAnCID,SAAS;AAAAyB,EAAA,GAATzB,SAAS;AAqCf,eAAeA,SAAS;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}